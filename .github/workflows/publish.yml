name: Build and Publish to PyPI

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags and releases
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version bumping
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      run: |
        # Get current version
        current_version=$(python -c "from src.fdq.__about__ import __version__; print(__version__)")
        echo "Current version: $current_version"
        
        # Bump patch version (0.0.52 -> 0.0.53)
        bump2version patch src/fdq/__about__.py --current-version=$current_version --no-commit --no-tag
        
        # Get new version
        new_version=$(python -c "from src.fdq.__about__ import __version__; print(__version__)")
        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Commit version bump
      run: |
        git add src/fdq/__about__.py
        git commit -m "Bump version to ${{ env.NEW_VERSION }}"
        git push origin master

    - name: Create git tag
      run: |
        git tag "v${{ env.NEW_VERSION }}"
        git push origin "v${{ env.NEW_VERSION }}"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m twine upload dist/*

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          Automated release v${{ env.NEW_VERSION }}
          
          Changes in this release:
          - Version bump to ${{ env.NEW_VERSION }}
        draft: false
        prerelease: false
